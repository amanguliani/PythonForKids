{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Practice Book Python Class - Aman",
      "provenance": [],
      "collapsed_sections": [
        "bOrUY_36rT3W",
        "75PejcugQ_PY",
        "S8hKYgXzU53N"
      ]
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bOrUY_36rT3W",
        "colab_type": "text"
      },
      "source": [
        "# Class 1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f_abhSPbsWkN",
        "colab_type": "text"
      },
      "source": [
        "##Printing"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jszRzuQMrYzE",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "7d240c29-4542-42f2-c79c-f540a2fc34b5"
      },
      "source": [
        "print (\"Lets print something \")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Lets print something \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nhz1D5IrsIrN",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "76db6c4a-cda1-4bcf-96b1-dcd88db4b561"
      },
      "source": [
        "print (\"Hi! My name is Aman \")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Hi! My name is Aman \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hAamYfqdsbmI",
        "colab_type": "text"
      },
      "source": [
        "## Variables"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JZAGcnjasPfx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "num = 1 \n",
        "my_string = \"This is a string\""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rBSwI6kqsfT6",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "39af5a90-dd32-4959-b622-79593044fae0"
      },
      "source": [
        "print (num)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WPISwkvJsxPh",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "ad7c3946-940b-4837-9a3b-00c38a98c857"
      },
      "source": [
        "print (my_string)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "This is a string\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J8ds5mGPz4yu",
        "colab_type": "text"
      },
      "source": [
        "## Data Type - Strings"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4nkIF0d0z8hD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "my_str = \"Hello\""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WRD2u6Du0HE_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "e89de17c-4b08-4e7c-f88a-1921e6b23a30"
      },
      "source": [
        "print (my_str)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Hello\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cO-vKEaE0zDt",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "cbfc2a43-edb9-4b73-f16d-a5e0d479cbd1"
      },
      "source": [
        "print (my_str[0])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "H\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YfMFG-RM1gvv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "different_string = \"This is a MY NAME: AMAN\""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YRgcq2sF1jhv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "9f79579c-00aa-4cd9-9d4e-b9548075da1b"
      },
      "source": [
        " print (\"Hello\", different_string[19:])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Hello AMAN\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RjiYadS73Ic_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "560acf2d-5337-42fd-f0d4-22b8bff488eb"
      },
      "source": [
        "print (different_string[-4:])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "AMAN\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AdFgK7IV4O88",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "64a05694-c76a-45e8-d7e4-04a1822dfabb"
      },
      "source": [
        "len(different_string)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "23"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BGiWo1Y84hEB",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "faba0e0d-2501-4a42-ec5a-8d83b1310d9f"
      },
      "source": [
        "different_string.lower()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'this is a my name: aman'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "92G4OcAs5UQU",
        "colab_type": "text"
      },
      "source": [
        "##Data Type - Numbers"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4Z9ZSpNv5WLB",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "num1 = 3\n",
        "num2 = 4"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "td8lvryo5hdb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "sum = num1+num2"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WDzNOwCt58bf",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "00df4cfe-3a6b-4d72-fe3c-1b326b1b0135"
      },
      "source": [
        "print (sum)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "7\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BHuDdLna6BFB",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "6dd50244-beda-4425-ca9c-2ed03f7c9b30"
      },
      "source": [
        "num1 ** num2"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "81"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "75PejcugQ_PY",
        "colab_type": "text"
      },
      "source": [
        "# Class 2"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WqVfMHFHRBEC",
        "colab_type": "text"
      },
      "source": [
        "## Recap"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "te79TlPKRKBa",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        },
        "outputId": "e2e60be2-0947-44a7-d152-080a31f6b237"
      },
      "source": [
        "var_string = \"This is a string \"\n",
        "a = 3\n",
        "b = 5\n",
        "\n",
        "print (var_string[4:])\n",
        "c = a+b\n",
        "print (c)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " is a string \n",
            "8\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tYimLaxeRixu",
        "colab_type": "text"
      },
      "source": [
        "## Operations and Type "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c45zn76kRrWv",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "9ccf2f90-54ee-40e4-a09a-8dae9b37f689"
      },
      "source": [
        "a = 5.0\n",
        "\n",
        "type(a)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "float"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PlBILWt4Rt3V",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "33a9ce9e-735b-41ac-bb0a-a248f35fd8e0"
      },
      "source": [
        "s = \"5\"\n",
        "\n",
        "type(s)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "str"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TirNLZl5RyYY",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "416c3471-fc87-4354-c306-0d2cd2990aa3"
      },
      "source": [
        "a + 5 # give me 10 "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W0H7H5dDR5Dr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 167
        },
        "outputId": "a58ab55c-11e9-4278-ebe7-aeb73d4926fe"
      },
      "source": [
        "s + 5 # Gives me an error "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-22-0284c04bfa3d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0ms\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m5\u001b[0m \u001b[0;31m# Gives me an error\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: must be str, not int"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OMfeuuM3R9TU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "s + \"5\" # Will make it string 55"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1tQ527BtSCyg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# what if i have to convert it to a int ?\n",
        "s = \"45\"\n",
        "\n",
        "c = int(s) + 5\n",
        "\n",
        "print (c) # Now this will give me 10 "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JXKCoq9VSRa8",
        "colab_type": "text"
      },
      "source": [
        "## Defining Strings & Input "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uQidnGrzSf73",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "my_string = 'Hey ! This is Aman !'\n",
        "\n",
        "print (my_string)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b4vkstb2SV_p",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Give's an error why ?\n",
        "my_string = 'This is Aman's Class' "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ANTHhAe_St6V",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "my_string = \"This is Aman's Class\" # \"\" solves the problem of having 's\n",
        "\n",
        "print (my_string)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ap7WMUs1S74K",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Lets take the name from the user (someone who is running your program)\n",
        "\n",
        "name = input (\"Whats your name ? \")\n",
        "\n",
        "print (\"Hey there !\", name)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4X6HoJTuTRcp",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "type(name)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A5upfPOcTUR6",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "number = input (\"Input a number from 1-100 \")\n",
        "\n",
        "type(number)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7flAb8D0TjmF",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "number = int (input (\"Input a number from 1-100 \"))\n",
        "\n",
        "type (number)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "smui1uCqTuDN",
        "colab_type": "text"
      },
      "source": [
        "## Lists - Collection of other data types"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k9BW9Lz0TyaI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "list_empty = [] # empty list \n",
        "list_people_in_class = [\"Prisha\",\"Divya\", \"Aman\"] # List contains names of people in today's class\n",
        "\n",
        "print (list_empty)\n",
        "print(list_people_in_class)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HUPD1YNVUU3L",
        "colab_type": "text"
      },
      "source": [
        "### List operations"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J2riA5x1UXki",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "states = []\n",
        "\n",
        "print (states)\n",
        "\n",
        "type(states)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "voWQng_tUcCg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "states.append(\"New York\")\n",
        "\n",
        "print (states)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xzCihynEUkId",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "states.append(\"New Jersey\")\n",
        "\n",
        "print (states)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vRjhWVgwU5Pm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "states.remove('New Jersey')\n",
        "\n",
        "print (states)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SV5T6mKHVA01",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "states.insert(0, \"New Jersey\")\n",
        "print (states)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "D1CeKT7PVXte",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "states[0] = \"Massachusetts\""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oPl554_CVX3x",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "print (states)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x4KH-m2OVs-l",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "states.insert(1, \"New Jersey\")\n",
        "\n",
        "print (states)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KDDO6UFHVzBN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "print (states)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xDmuedk4VHGj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "states.sort()\n",
        "print (states)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N1xoVTf0WG2V",
        "colab_type": "text"
      },
      "source": [
        "## Class Excercise \n",
        "Name Greeter, take a name and chose a different greeting from a list "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UMgN5JOLWRGP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "list_greeting = [\"Hello \", \"Hey \", \"Bonjour \", \"Namaste \", \"Hola \", \"Shalom \"]\n",
        "\n",
        "name = input (\"Hey there ! Whats your name ?\")\n",
        "\n",
        "import random\n",
        "\n",
        "greeting = random.choice(list_greeting)\n",
        "print (greeting, name)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S8hKYgXzU53N",
        "colab_type": "text"
      },
      "source": [
        "# Class 3 "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p6OjtjysU_uu",
        "colab_type": "text"
      },
      "source": [
        "## Boolean"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XB6FDz6S11V-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "b = True"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BnXpO6KO169a",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "type(b)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6D0iw1MMU8uh",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "x = 5"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Z9uiP4292Y6B",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "y = (x == 5)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mvmxsq883DUM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "type(y)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uB98HGLu2gCu",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "print (y)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "E7ikd_LSVEKW",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "print (x == 5)\n",
        "print (x < 10)\n",
        "print (x > 6)\n",
        "print (x != 5)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DXQ67XE6Vzad",
        "colab_type": "text"
      },
      "source": [
        "## Condition - If , else"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DGwMg9eOV1TK",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "name = input(\"Whats your name ? \")\n",
        "\n",
        "if name == \"Aman\":\n",
        "  print (\"Hey Aman !\")\n",
        "elif name == \"Divya\":\n",
        "  print (\"Hey Divya !\")\n",
        "elif name == \"Prisha\":\n",
        "  print (\"Hey Prisha !\")\n",
        "else:\n",
        "  print (\"You are not allowed here , sorry !\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zzGardnmWKJq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# combining condition and / or\n",
        "age = 0\n",
        "if name == \"Aman\" or name == \"Divya\" or name == \"Prisha\":\n",
        "  age = int (input (\"whats your age ? \"))\n",
        "\n",
        "\n",
        "if age > 0 and age <= 30 and name == \"Aman\":\n",
        "  print(\"You are allowed to enter\") \n",
        "else:\n",
        "  print (\"Not Allowed !\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UqtPevKZXPs4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Not Lets combine all of it together \n",
        "\n",
        "names_allowed = [\"Aman\", \"Divya\", \"Prisha\", \"Vraj\", \"Nidhi\"]\n",
        "\n",
        "user_name = input (\"Hi! Whats your name ? \")\n",
        "user_age = int(input (\"Whats your age ?\"))\n",
        "\n",
        "if user_name in names_allowed and user_age in range(1, 30):\n",
        "  print (\"Welcome to the Python Class !!\")\n",
        "else:\n",
        "  print (\"Sorry, you are not allowed\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fjLJIOdYXtB-",
        "colab_type": "text"
      },
      "source": [
        "## Loops - For and While "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PEoPGxVNE1SJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "for name in names_allowed:\n",
        "  print (\"Hello\", name)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ND1HIRvEXr_T",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# for loop\n",
        "primes = [2, 3, 5, 7]\n",
        "for p in primes:\n",
        "    print(p)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5DSv6lk3YB0r",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# range function \n",
        "for num in range (1, 100):\n",
        "  print (num)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XmcbCgonYKJa",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# While loop\n",
        "\n",
        "count = 0\n",
        "\n",
        "while count < 100:\n",
        "  print (\"The count is \", count)\n",
        "  count = count + 1 # must be added.\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NQG0dBjaCIWY",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "names_allowed = [\"Aman\", \"Divya\", \"Prisha\", \"Vraj\", \"Nidhi\"]\n",
        "\n",
        "user_name = \"\"\n",
        "\n",
        "while user_name not in names_allowed: \n",
        "  user_name = input(\"Whats your name ?\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L00M_4QQtf8w",
        "colab_type": "text"
      },
      "source": [
        "# Class 4"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kTKJlSCUtipX",
        "colab_type": "text"
      },
      "source": [
        "## HW Questions"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q08rrVost5PG",
        "colab_type": "text"
      },
      "source": [
        "### Dice Roll"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gm-RrdMZ3BmH",
        "colab_type": "text"
      },
      "source": [
        "Two Dice roll till the value is the same."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3Sm3KnV7tq3C",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 174
        },
        "outputId": "86488d6b-83c5-46b4-ceea-028a7b94e0e3"
      },
      "source": [
        "import random\n",
        "\n",
        "dice_roll_1 = 1\n",
        "dice_roll_2 = 2\n",
        "\n",
        "while (dice_roll_1 != dice_roll_2):\n",
        "  dice_roll_1 = random.randint(1,6)\n",
        "  dice_roll_2 = random.randint(1,6)\n",
        "  print (\"Dice rolls are \", dice_roll_1, dice_roll_2)\n",
        "\n",
        "print (\"Values are equal ! \")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Dice rolls are  5 3\n",
            "Dice rolls are  4 2\n",
            "Dice rolls are  4 5\n",
            "Dice rolls are  1 2\n",
            "Dice rolls are  2 5\n",
            "Dice rolls are  6 3\n",
            "Dice rolls are  4 2\n",
            "Dice rolls are  5 5\n",
            "Values are equal ! \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2dyWOJ2et2Eg",
        "colab_type": "text"
      },
      "source": [
        "### Calculator"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0f9P4CKp8yoN",
        "colab_type": "text"
      },
      "source": [
        "Take two numbers and operator (+, -, *) print the result"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IvIz-ByCt-eu",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        },
        "outputId": "55b73274-9fe3-4150-951e-46c45b89364e"
      },
      "source": [
        "num1 = int(input(\"Enter first number.  \"))\n",
        "num2 = int(input(\"Enter second number.  \"))\n",
        "operator = input (\"Enter operation on numbers from +, -, *.  \")\n",
        "\n",
        "if operator is \"+\":\n",
        "  print (num1+num2)\n",
        "elif operator is \"-\":\n",
        "  print (num1-num2)\n",
        "elif operator is \"*\":\n",
        "  print(num1*num2)\n",
        "else:\n",
        "  print (\"Operation not permitted !\")\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter first number.  8\n",
            "Enter second number.  9\n",
            "Enter operation on numbers from +, -, *.  +\n",
            "17\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HVGhIjdztkjc",
        "colab_type": "text"
      },
      "source": [
        "## Functions "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O4SuXef5tyJz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ojqYGHWutvkB",
        "colab_type": "text"
      },
      "source": [
        "## Algorithm "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ml6HmdyntzFm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}